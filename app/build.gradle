apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: '../config/quality.gradle'

android {
    def globalConfig = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfig["androidCompileSdkVersion"]
    buildToolsVersion globalConfig["androidBuildToolsVersion"]

    defaultConfig {
        applicationId "com.ianarbuckle.dublinbushelper"
        minSdkVersion globalConfig["androidMinSdkVersion"]
        targetSdkVersion globalConfig["androidTargetSdkVersion"]
        versionCode calculateVersionCode()
        versionName "1.0"
        multiDexEnabled true

        def version = versionName + '.' + System.env.BUILD_NUMBER
        buildConfigField "String", "VERSION", "\"$version\""
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            versionNameSuffix calculateVersionNameSuffix()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            versionNameSuffix calculateVersionNameSuffix()
        }
    }

    productFlavors {
        snapshot {
            flavorDimensions "snapshot"
            applicationId "com.ianarbuckle.dublinbushelper.snapshot"
        }
        staging {
            flavorDimensions "staging"
            applicationId "com.ianarbuckle.dublinbushelper.staging"
        }
        production {
            flavorDimensions "production"
            applicationId "com.ianarbuckle.dublinbushelper"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
// Google dependencies
    def googleDependencies = rootProject.ext.googleDependencies
    compile googleDependencies.appCompat
    compile googleDependencies.cardView
    compile googleDependencies.recyclerView
    compile googleDependencies.designSupportLib
    compile googleDependencies.annotationsSupportLib
    compile googleDependencies.mapUtils
    compile googleDependencies.googleMaps
    compile googleDependencies.googleLocation
    compile googleDependencies.googleGcm
    compile googleDependencies.multidexSupportLib
    compile googleDependencies.gson
    compile googleDependencies.googleAuth
    compile googleDependencies.supportV4Lib
    compile googleDependencies.supportV13Lib

    //Firebase dependencies
    def firebaseDependencies = rootProject.ext.firebaseDependencies
    compile firebaseDependencies.firebaseDatabase
    compile firebaseDependencies.firebaseAuth
    compile firebaseDependencies.firebaseConfig
    compile firebaseDependencies.firebaseInvite
    compile firebaseDependencies.firebaseMessage
    compile firebaseDependencies.firebaseCrash
    compile firebaseDependencies.firebaseUIDatabase


    // Third party dependencies
    def thirdPartyDependencies = rootProject.ext.thirdPartyDependencies
    compile thirdPartyDependencies.butterKnife
    annotationProcessor thirdPartyDependencies.butterKnifeCompiler
    compile thirdPartyDependencies.okHttp
    compile thirdPartyDependencies.okHttpUrlConnection
    compile thirdPartyDependencies.okHttpLogging
    compile thirdPartyDependencies.retrofit
    compile thirdPartyDependencies.retrofitGson
    compile thirdPartyDependencies.glide
    compile thirdPartyDependencies.joda
    compile thirdPartyDependencies.moshi
    compile thirdPartyDependencies.timber

    // RxJava
    compile thirdPartyDependencies.rxJava
    compile thirdPartyDependencies.rxAndroid
    compile thirdPartyDependencies.rxBinding
    compile thirdPartyDependencies.rxBindingRV
    compile thirdPartyDependencies.rxBindingAppCompat
    compile thirdPartyDependencies.rxBindingV3
    compile thirdPartyDependencies.rxJavaAdapter

    // Dagger
    annotationProcessor thirdPartyDependencies.daggerCompiler
    compile thirdPartyDependencies.dagger

    // Test
    def testDependencies = rootProject.ext.testDependencies
    testCompile testDependencies.junit
    testCompile testDependencies.mockito
    testCompile testDependencies.robolectric

    //    instrumentation testing
    androidTestCompile googleDependencies.annotationsSupportLib
    androidTestCompile testDependencies.testRunner

    // Quality
    provided thirdPartyDependencies.findBugs
    compile thirdPartyDependencies.javax
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    }
}

repositories {
    mavenCentral()
}

static def calculateVersionNameSuffix() {
    def buildNumber = System.env.BUILD_NUMBER
    def buildTimestamp = new Date().format('HH:mm dd/MM/yy')
    return buildNumber ? " (Build #$buildNumber)" : " (Built $buildTimestamp)"
}

static def calculateVersionCode() {
    def buildNumber = System.env.BUILD_NUMBER
    return buildNumber ? buildNumber.toInteger() : 1000000
}

apply plugin: 'com.google.gms.google-services'


